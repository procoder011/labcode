djikstras 

#include<bits/stdc++.h>
using namespace std;

int main(){
	int n,m,source;
	cin >> n >> m;
	vector<pair<int,int> > g[n+1]; 	// 1-indexed adjacency list for of graph

	int a,b,wt;
	for(int i = 0; i<m ; i++){
		cin >> a >> b >> wt;
		g[a].push_back(make_pair(b,wt));
		g[b].push_back(make_pair(a,wt));
	}	
	
	cin >> source;
	
	
	priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > pq;// min-heap ; In pair => (dist,from)
	vector<int> distTo(n+1,INT_MAX); 	// 1-indexed array for calculating shortest paths; 
	
	distTo[source] = 0;
	pq.push(make_pair(0,source));	// (dist,from)
	
	while( !pq.empty() ){
		int dist = pq.top().first;
		int prev = pq.top().second;
		pq.pop();
		
		vector<pair<int,int> >::iterator it;
		for( it = g[prev].begin() ; it != g[prev].end() ; it++){
			int next = it->first;
			int nextDist = it->second;
			if( distTo[next] > distTo[prev] + nextDist){
				distTo[next] = distTo[prev] + nextDist;
				pq.push(make_pair(distTo[next], next));
			}
		}
		
	}
	
	cout << "The distances from source, " << source << ", are : \n";
	for(int i = 1 ; i<=n ; i++)	cout << distTo[i] << " ";
	cout << "\n";
	
	return 0;
}





bellman ford 

#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

int main(){
    int N,m;
    cin >> N >> m;
    vector<node> edges; 
    for(int i = 0;i<m;i++) {
        int u, v, wt;
        cin >> u >> v >> wt; 
        edges.push_back(node(u, v, wt)); 
    }

    int src;
    cin >> src; 


    int inf = 10000000; 
    vector<int> dist(N, inf); 

    dist[src] = 0; 

    for(int i = 1;i<=N-1;i++) {
        for(auto it: edges) {
            if(dist[it.u] + it.wt < dist[it.v]) {
                dist[it.v] = dist[it.u] + it.wt; 
            }
        }
    }

    int fl = 0; 
    for(auto it: edges) {
        if(dist[it.u] + it.wt < dist[it.v]) {
            cout << "Negative Cycle"; 
            fl = 1; 
            break; 
        }
    }

    if(!fl) {
        for(int i = 0;i<N;i++) {
            cout << i << " " << dist[i] << endl;
        }
    }


    return 0;
}

/* 
6 7 
3 2 6 
5 3 1 
0 1 5 
1 5 -3 
1 2 -2 
3 4 -2 
2 4 3 
0
*/




kruskals


#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

bool comp(node a, node b) {
    return a.wt < b.wt; 
}

int findPar(int u, vector<int> &parent) {
    if(u == parent[u]) return u; 
    return parent[u] = findPar(parent[u], parent); 
}

void unionn(int u, int v, vector<int> &parent, vector<int> &rank) {
    u = findPar(u, parent);
    v = findPar(v, parent);
    if(rank[u] < rank[v]) {
    	parent[u] = v;
    }
    else if(rank[v] < rank[u]) {
    	parent[v] = u; 
    }
    else {
    	parent[v] = u;
    	rank[u]++; 
    }
}
int main(){
	int N,m;
	cin >> N >> m;
	vector<node> edges; 
	for(int i = 0;i<m;i++) {
	    int u, v, wt;
	    cin >> u >> v >> wt; 
	    edges.push_back(node(u, v, wt)); 
	}
	sort(edges.begin(), edges.end(), comp); 
	
	vector<int> parent(N);
	for(int i = 0;i<N;i++) 
	    parent[i] = i; 
	vector<int> rank(N, 0); 
	
	int cost = 0;
	vector<pair<int,int>> mst; 
	for(auto it : edges) {
	    if(findPar(it.v, parent) != findPar(it.u, parent)) {
	        cost += it.wt; 
	        mst.push_back({it.u, it.v}); 
	        unionn(it.u, it.v, parent, rank); 
	    }
	}
	cout << cost << endl;
	for(auto it : mst) cout << it.first << " - " << it.second << endl; 
	return 0;
}





prims 

#include<bits/stdc++.h>
using namespace std;

int main(){
	int N,m;
	cin >> N >> m;
	vector<pair<int,int> > adj[N]; 

	int a,b,wt;
	for(int i = 0; i<m ; i++){
		cin >> a >> b >> wt;
		adj[a].push_back(make_pair(b,wt));
		adj[b].push_back(make_pair(a,wt));
	}	
	
	int parent[N]; 
      
    int key[N]; 
      
    bool mstSet[N]; 
  
    for (int i = 0; i < N; i++) 
        key[i] = INT_MAX, mstSet[i] = false; 
  

    key[0] = 0; 
    parent[0] = -1; 
    int ansWeight = 0;
    for (int count = 0; count < N - 1; count++)
    { 
        
        int mini = INT_MAX, u; 
  
        for (int v = 0; v < N; v++) 
            if (mstSet[v] == false && key[v] < mini) 
                mini = key[v], u = v; 
                
        mstSet[u] = true; 
        
        for (auto it : adj[u]) {
            int v = it.first;
            int weight = it.second;
            if (mstSet[v] == false && weight < key[v]) 
                parent[v] = u, key[v] = weight; 
        }
            
    } 
    
    
    for (int i = 1; i < N; i++) 
        cout << parent[i] << " - " << i <<" \n"; 
	return 0;
}
Â© 2022 GitHub, Inc.



bfs

class Solution {
public:
	vector<int>bfsOfGraph(int V, vector<int> adj[]){
	    vector<int> bfs; 
	    vector<int> vis(V, 0); 
	    queue<int> q; 
	    q.push(0); 
	    vis[0] = 1; 
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop(); 
	        bfs.push_back(node); 
	        
	        for(auto it : adj[node]) {
	            if(!vis[it]) {
	                q.push(it); 
	                vis[it] = 1; 
	            }
	        }
	    }
	    
	    return bfs; 
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	// for multiple graphs
	while(tc--){
		int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    // 		adj[v].push_back(u); // uncomment this for undirected graoh 
    	}
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int>ans=obj.bfsOfGraph(V, adj);
        for(int i=0;i<ans.size();i++){
        	cout<<ans[i]<<" ";
        }
        cout<<endl;
	}
	return 0;
  
  
  
 dfs
 
 
 
#include<bits/stdc++.h>
using namespace std;


class Solution {
    void dfs(int node, vector<int> &vis, vector<int> adj[], vector<int> &storeDfs) {
        storeDfs.push_back(node); 
        vis[node] = 1; 
        for(auto it : adj[node]) {
            if(!vis[it]) {
                dfs(it, vis, adj, storeDfs); 
            }
        }
    }
public:
	vector<int>dfsOfGraph(int V, vector<int> adj[]){
	    vector<int> storeDfs; 
	    vector<int> vis(V+1, 0); 
      for(int i = 1;i<=V;i++) {
        if(!vis[i]) dfs(i, vis, adj, storeDfs); 
      }
	    return storeDfs; 
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    		adj[v].push_back(u);
    	}
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int>ans=obj.dfsOfGraph(V, adj);
        for(int i=0;i<ans.size();i++){
        	cout<<ans[i]<<" ";
        }
        cout<<endl;
	}
	return 0;
  
  
  
  bubble sort
  
  #include <bits/stdc++.h> 
using namespace std; 

void swap(int *xp, int *yp) 
{ 
	int temp = *xp; 
	*xp = *yp; 
	*yp = temp; 
} 

// A function to implement bubble sort 
void bubbleSort(int arr[], int n) 
{ 
	int i, j, is_swap = 0; 
	for (i = 0; i < n-1; i++)	 
	{
		is_swap=0;
		// Last i elements are already in place 
		for (j = 0; j < n-i-1; j++) 
			if (arr[j] > arr[j+1]) 
			{	
				swap(&arr[j], &arr[j+1]); 
				is_swap=1;
			}
		if(is_swap==0)
			break;
	}
} 

/* Function to print an array */
void printArray(int arr[], int size) 
{ 
	int i; 
	for (i = 0; i < size; i++) 
		cout << arr[i] << " "; 
	cout << endl; 
} 

// Driver code 
int main() 
{ 
	int arr[] = {64, 34, 25, 12, 22, 11, 90}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	bubbleSort(arr, n); 
	cout<<"Sorted array: \n"; 
	printArray(arr, n); 
	return 0; 
} 


merge sort

#include <iostream>

using namespace std;

// A function to merge the two half into a sorted data.
void
Merge (int *a, int low, int high, int mid)
{
  // We have low to mid and mid+1 to high already sorted.
  int i, j, k, temp[high - low + 1];
  i = low;
  k = 0;
  j = mid + 1;

  // Merge the two parts into temp[].
  while (i <= mid && j <= high)
    {
      if (a[i] < a[j])
	{
	  temp[k] = a[i];
	  k++;
	  i++;
	}
      else
	{
	  temp[k] = a[j];
	  k++;
	  j++;
	}
    }

  // Insert all the remaining values from i to mid into temp[].
  while (i <= mid)
    {
      temp[k] = a[i];
      k++;
      i++;
    }

  // Insert all the remaining values from j to high into temp[].
  while (j <= high)
    {
      temp[k] = a[j];
      k++;
      j++;
    }


  // Assign sorted data stored in temp[] to a[].
  for (i = low; i <= high; i++)
    {
      a[i] = temp[i - low];
    }
}

// A function to split array into two parts.
void
MergeSort (int *a, int low, int high)
{
  int mid;
  if (low < high)
    {
      mid = (low + high) / 2;
      // Split the data into two half.
      MergeSort (a, low, mid);
      MergeSort (a, mid + 1, high);

      // Merge them to get sorted output.
      Merge (a, low, high, mid);
    }
}

int
main ()
{
  int n, i;
  cout << "\nEnter the number of data element to be sorted: ";
  cin >> n;

  int arr[n];
  for (i = 0; i < n; i++)
    {
      cout << "Enter element " << i + 1 << ": ";
      cin >> arr[i];
    }

  MergeSort (arr, 0, n - 1);

  // Printing the sorted data.
  cout << "\nSorted Data ";
  for (i = 0; i < n; i++)
    cout << "->" << arr[i];

  return 0;
}


quick sort

#include <bits/stdc++.h> 
using namespace std; 

// A utility function to swap two elements 
void swap(int* a, int* b) 
{ 
	int t = *a; 
	*a = *b; 
	*b = t; 
} 

/* This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot */
int partition (int arr[], int low, int high) 
{ 
	int pivot = arr[high]; // pivot 
	int i = (low - 1); // Index of smaller element 

	for (int j = low; j <= high - 1; j++) 
	{ 
		// If current element is smaller than the pivot 
		if (arr[j] < pivot) 
		{ 
			i++; // increment index of smaller element 
			swap(&arr[i], &arr[j]); 
		} 
	} 
	swap(&arr[i + 1], &arr[high]); 
	return (i + 1); 
} 

/* The main function that implements QuickSort 
arr[] --> Array to be sorted, 
low --> Starting index, 
high --> Ending index */
void quickSort(int arr[], int low, int high) 
{ 
	if (low < high) 
	{ 
		/* pi is partitioning index, arr[p] is now 
		at right place */
		int pi = partition(arr, low, high); 

		// Separately sort elements before 
		// partition and after partition 
		quickSort(arr, low, pi - 1); 
		quickSort(arr, pi + 1, high); 
	} 
} 

/* Function to print an array */
void printArray(int arr[], int size) 
{ 
	int i; 
	for (i = 0; i < size; i++) 
		cout << arr[i] << " "; 
	cout << endl; 
} 

// Driver Code 
int main() 
{ 
	int arr[] = {10, 7, 8, 9, 1, 5}; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	quickSort(arr, 0, n - 1); 
	cout << "Sorted array: \n"; 
	printArray(arr, n); 
	return 0; 
} 


selection sort

#include <bits/stdc++.h> 
using namespace std; 

void swap(int *xp, int *yp) 
{ 
	int temp = *xp; 
	*xp = *yp; 
	*yp = temp; 
} 

void selectionSort(int arr[], int n) 
{ 
	int i, j, min_idx; 

	// One by one move boundary of unsorted subarray 
	for (i = 0; i < n-1; i++) 
	{ 
		// Find the minimum element in unsorted array 
		min_idx = i; 
		for (j = i+1; j < n; j++) 
		if (arr[j] < arr[min_idx]) 
			min_idx = j; 

		// Swap the found minimum element with the first element 
		swap(&arr[min_idx], &arr[i]); 
	} 
} 

/* Function to print an array */
void printArray(int arr[], int size) 
{ 
	int i; 
	for (i=0; i < size; i++) 
		cout << arr[i] << " "; 
	cout << endl; 
} 

// Driver program to test above functions 
int main() 
{ 
	int arr[] = {64, 25, 12, 22, 11}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	selectionSort(arr, n); 
	cout << "Sorted array: \n"; 
	printArray(arr, n); 
	return 0; 
} 


TRAVELLING SALESMAN





#include <iostream>
#include <vector>
#include <algorithm>
#include <time.h>
#include <cmath>
#include <climits>

using namespace std;

int travellingSalesman(int **graph, int start, int V) {
    vector<int> vertex;
	for (int i = 0; i < V; i++)
		if (i != start)
			vertex.push_back(i);

    int minimumPath = INT_MAX;
	do {
        int weight = 0, p=start;
        for (int i = 0; i < vertex.size(); i++) {
			weight += graph[p][vertex[i]];
			p = vertex[i];
		}
		weight += graph[p][start];
        minimumPath = min(minimumPath, weight);

	} while (next_permutation(vertex.begin(), vertex.end()));

	return minimumPath;
}


int main() {
    clock_t start, end;
    double t, c;
         int V, E, s, e, w;
    cout<<"Enter the number of vertices and edges: ";
    cin >> V >> E;
	int **graph = new int*[V];
    for(int i=0; i<V; i++)
        graph[i] = new int[V];
	
	for(int i=0; i<E;i++) {
	    cout<<"Enter source, dest and weight of edge "<< i+1 <<" : ";
	    cin>>s>>e>>w;
	    graph[s][e]=w;
	    graph[e][s]=w;
	}
	int st = 0, cost;

    start = clock();
    cost = travellingSalesman(graph, st, V);
    end = clock();
    cout << "The minimum path is " << cost << endl;

    t = double(end - start) / double(CLOCKS_PER_SEC) * pow(10, 9);
    c = t / (pow(V, 2) * pow(2, V));

    cout << "\nTime Taken = " << t << " ns";
    cout << "\nMachine Constant = " << c;

	return 0;
}



KNAPSACK


#include <bits/stdc++.h>

using namespace std;

int knapsackUtil(vector<int>& wt, vector<int>& val, int ind, int W, vector<vector<int>>& dp){

    if(ind == 0){
        if(wt[0] <=W) return val[0];
        else return 0;
    }
    
    if(dp[ind][W]!=-1)
        return dp[ind][W];
        
    int notTaken = 0 + knapsackUtil(wt,val,ind-1,W,dp);
    
    int taken = INT_MIN;
    if(wt[ind] <= W)
        taken = val[ind] + knapsackUtil(wt,val,ind-1,W-wt[ind],dp);
        
    return dp[ind][W] = max(notTaken,taken);
}


int knapsack(vector<int>& wt, vector<int>& val, int n, int W){
    
    vector<vector<int>> dp(n,vector<int>(W+1,-1));
    return knapsackUtil(wt, val, n-1, W, dp);
}

int main() {

  vector<int> wt = {1,2,4,5};
  vector<int> val = {5,4,8,6};
  int W=5;
  
  int n = wt.size();
                                 
  cout<<"The Maximum value of items, thief can steal is " <<knapsack(wt,val,n,W);
}



vertex cover


VERTEX COVER
Input
#include <iostream>
#include <list>
#include <time.h>
#include <cmath>

using namespace std;

class Graph
{
	int V; 
	list<int> *adj;

    public:
	Graph(int V) {
	    this->V = V;
	    adj = new list<int>[V];
    }
	
    void addEdge(int v, int w) {
	    adj[v].push_back(w); 
    	adj[w].push_back(v); 

        return;
    }

	void printVertexCover() {
	    bool visited[V];
	    for (int i=0; i<V; i++)
		    visited[i] = false;

	    list<int>::iterator i;

	    for (int u=0; u<V; u++)
	        if (visited[u] == false)
		        for (i= adj[u].begin(); i != adj[u].end(); i++) {
				    int v = *i;
				    if (visited[v] == false) {
					    visited[v] = true;
					    visited[u] = true;
					    break;
				    }
			    }

    cout<<"Vertex Cover: ";
	for (int i=0; i<V; i++)
		if (visited[i])
		cout << i << " ";
}
};

int main() {
    clock_t start, end;
    double t, c;

    int V, E, s, dest;
    cout<<"Enter the number of vertices and edges: ";
    cin>>V>>E;

	Graph g(V);
    for(int i=0; i<E; i++) {
        cout<<"Enter source, dest and weight of edge "<< i+1 <<" : ";
        cin>>s>>dest;
        g.addEdge(s, dest);
    }

    start = clock();
	g.printVertexCover();
    end = clock();

    t = double(end - start) / double(CLOCKS_PER_SEC) * pow(10, 9);
    c = t / (V + E);

    cout << "\nTime Taken = " << t << " ns";
    cout << "\nMachine Constant = " << c;

	return 0;
}



Fractional Knapsack
#include <iostream>
#include <algorithm>
using namespace std;

class item{
    public:
    int weight;
    int value;
    float ratio;
};

void mergeSort(item items[], int i, int f){

    //modify merge sort code accordingly

}

int fractionalKnapsack(item items[], int n, int Kweight){
    for(int i=0; i<n; i++){
        items[i].ratio= items[i].value/items[i].weight;
    }

    mergeSort(items, 0, n-1);

    int i=0;
    float Value;

    for( i=0; i<n; i++){
        if(items[i].weight+Value<= Kweight){
            Value+= items[i].weight;
        }
        else{
            break;
        }
    }

    Value+= ((Kweight-Value)/items[i+1].weight)*items[i+1].value;

    return Value;

}

int main(){
    int n;
    cin>>n;

    item items[n];
    for(int i=0; i<n; i++){
        cin>>items[i].weight>>items[i].value;
    }

    int Kweight;
    cin>>Kweight;

    int value= fractionalKnapsack(items, n, Kweight);

}


Priority queue
#include <iostream>
#include <climits>
#include <chrono>
#define MAX_SIZE 1000

using namespace std;

struct element {
    int value;
    int priority;
};

element priority_queue[MAX_SIZE];

int size = -1;

void enqueue(int value, int priority) {
    int j = size+1;
    for(; j>=0; j--) {
        if((priority_queue[j].priority < priority) || ((priority_queue[j].priority == priority) && (priority_queue[j].value < value))) {
            priority_queue[j+1] = priority_queue[j];
        } else {
            break;
        }
    }
    priority_queue[j+1].value = value;
    priority_queue[j+1].priority = priority;
    size++;
}

int peek() {
    if(size > -1) {
        return 0;
    } else {
        return -1;
    }
}

void dequeue() {
    int index = 0;
    for(int i = index; i <= size; i++) {
        priority_queue[i] = priority_queue[i+1];
    }
    size--;
}

int main() {
    auto startTime1 = chrono::high_resolution_clock::now();
    for(int i=0; i<MAX_SIZE; i++) {
        enqueue(i, i);
    }
    auto endTime1 = chrono::high_resolution_clock::now();
    double time1 = chrono::duration_cast<chrono::nanoseconds>(endTime1-startTime1).count();
    time1 = time1/1000000000;
    cout << "Machine Constant 1: " << time1/MAX_SIZE << endl;

    auto startTime2 = chrono::high_resolution_clock::now();
    int temp;
    while(temp != -1) {
        temp = peek();
        dequeue();
    }
    auto endTime2 = chrono::high_resolution_clock::now();
    double time2 = chrono::duration_cast<chrono::nanoseconds>(endTime2-startTime2).count();
    time2 = time2/1000000000;
    cout << "Machine Constant 2: " << time2/MAX_SIZE << endl;
    
    return 0;
}


